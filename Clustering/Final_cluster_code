######################clustering#########################
####################sentiment and location###############
####################11/9/2018############################

library(readr)
library(lubridate)
library(ggplot2)
library(ggmap)
library(dplyr)
library(data.table)
library(ggrepel)
library(tidytext)
library(stringr)
library(text2vec)
#install.packages("geosphere")
library(geosphere)

#--------------------------get google map work--------------------------------------#
#download boston_1.Rdata on github, then run this code. if ggmap is load, should work
#load("C:/Users/Sophe/Desktop/FALL/Fall3/Clustering/boston_1.rdata")

register_google("AIzaSyBdQvxweoFWqcM6oHjuRTEPtCLguSXRiT0")

map <- get_map(location = "Boston",zoom=14)

ggmap(map)
#save(map,file = "boston_2.RData")   


#-------------------------------------------------------------------------------#
reviews <- read_csv("/Users/johnpamplin/Documents/RStudio/Clustering/Data/reviews.csv")
#reviews <- read_csv("C:/Users/Sophe/Desktop/FALL/Fall3/Clustering/Project1/boston-airbnb-open-data/reviews.csv")
#View(reviews)

# the word bank with sentiment score
nrc_total <- get_sentiments("afinn")

rv <- reviews %>%
  group_by(listing_id) %>%
  count(listing_id, sort = TRUE) %>%
  filter(n >= 10) %>%
  select(-"n")

# get the sentiment score
new_reviews <- reviews %>%
  group_by(listing_id) %>%
  unnest_tokens(word, comments)  %>%
  right_join(rv,by="listing_id") %>% filter(!is.na(word)) %>%
  left_join(nrc_total,by="word") %>% filter(!is.na(score))

# summarize the score of each house, and count the number of words each house recieves, 

# then calculate the average score
score <- new_reviews %>%
  group_by(listing_id) %>%
  mutate(sscore = sum(score), n = n()) %>%
  distinct(listing_id,sscore, n) %>%
  mutate(avg = sscore / n)

hist(score$avg)

# standardize the score
score$avg <- scale(score$avg)

hist(score$avg)

# combine the house info
listings <- read_csv("/Users/johnpamplin/Documents/RStudio/Clustering/Data/listings.csv")
#listings <- read_csv("C:/Users/Sophe/Desktop/FALL/Fall3/Clustering/Project1/boston-airbnb-open-data/listings.csv")

colnames(listings)[1] <- "listing_id"

combined <- score %>%
  left_join(listings) %>%
  mutate(price = as.numeric(str_sub(price, start = 2))) %>%
  mutate(price_per_bedroom = price / bedrooms, price_per_accommodate = price / accommodates)

plot(combined$price_per_bedroom,combined$avg)

plot(combined$price_per_accommodate,combined$avg)


combined$std.lat <- scale(combined$latitude)

combined$std.lon <- scale(combined$longitude)

#----------------John's code---------------------------------
calendar <- read.csv("/Users/johnpamplin/Documents/RStudio/Clustering/Data/calendar.csv")

summary(calendar)

calendar$price = as.numeric(calendar$price)

calendar$total = 1

calendar$is_full = ifelse((calendar$available == "f"), 0, 1)

calendar$price = ifelse((calendar$price == 1), 0, calendar$price)


DT <- data.table(calendar)

x = DT[, sum(total), by = listing_id]
y = DT[, sum(is_full), by = listing_id]
z = DT[, sum(price), by = listing_id]


calendar_percent = inner_join(x,y, by = "listing_id")

calendar_percent = inner_join(calendar_percent,z, by = "listing_id")

calendar_percent$percent_full = (calendar_percent$V1.y / calendar_percent$V1.x)

calendar_percent$sum_cost = calendar_percent$V1

calendar_unique = dplyr::select(calendar_percent, listing_id, percent_full, sum_cost)

combined = left_join(combined, calendar_unique, by = "listing_id")

combined <- combined %>%
  filter(beds != 0)
combined$price_per_bed <- combined$price/combined$beds
########################################################################################################################################################################
########################################################################################################################################################################
#install.packages("Imap")
library(Imap)

register_google("AIzaSyBdQvxweoFWqcM6oHjuRTEPtCLguSXRiT0")

map <- get_map(location = "Boston",zoom=11)

ggmap(map)

ReplaceLowerOrUpperTriangle <- function(m, triangle.to.replace){
  # If triangle.to.replace="lower", replaces the lower triangle of a square matrix with its upper triangle.
  # If triangle.to.replace="upper", replaces the upper triangle of a square matrix with its lower triangle.
  
  if (nrow(m) != ncol(m)) stop("Supplied matrix must be square.")
  if      (tolower(triangle.to.replace) == "lower") tri <- lower.tri(m)
  else if (tolower(triangle.to.replace) == "upper") tri <- upper.tri(m)
  else stop("triangle.to.replace must be set to 'lower' or 'upper'.")
  m[tri] <- t(m)[tri]
  return(m)
}

GeoDistanceInMetresMatrix <- function(df.geopoints){
  # Returns a matrix (M) of distances between geographic points.
  # M[i,j] = M[j,i] = Distance between (df.geopoints$lat[i], df.geopoints$lon[i]) and
  # (df.geopoints$lat[j], df.geopoints$lon[j]).
  # The row and column names are given by df.geopoints$name.
  
  GeoDistanceInMetres <- function(g1, g2){
    # Returns a vector of distances. (But if g1$index > g2$index, returns zero.)
    # The 1st value in the returned vector is the distance between g1[[1]] and g2[[1]].
    # The 2nd value in the returned vector is the distance between g1[[2]] and g2[[2]]. Etc.
    # Each g1[[x]] or g2[[x]] must be a list with named elements "index", "lat" and "lon".
    # E.g. g1 <- list(list("index"=1, "lat"=12.1, "lon"=10.1), list("index"=3, "lat"=12.1, "lon"=13.2))
    DistM <- function(g1, g2){
      require("Imap")
      return(ifelse(g1$index > g2$index, 0, gdist(lat.1=g1$lat, lon.1=g1$lon, lat.2=g2$lat, lon.2=g2$lon, units="m")))
    }
    return(mapply(DistM, g1, g2))
  }
  
  n.geopoints <- nrow(df.geopoints)
  
  # The index column is used to ensure we only do calculations for the upper triangle of points
  df.geopoints$index <- 1:n.geopoints
  
  # Create a list of lists
  list.geopoints <- by(df.geopoints[,c("index", "lat", "lon")], 1:n.geopoints, function(x){return(list(x))})
  
  # Get a matrix of distances (in metres)
  mat.distances <- ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
  
  # Set the row and column names
  rownames(mat.distances) <- df.geopoints$name
  colnames(mat.distances) <- df.geopoints$name
  
  return(mat.distances)
}



lat_lon = cbind(combined$listing_id, combined$latitude, combined$longitude)

df = as.data.frame(lat_lon)

names(df) = c("index", "lat", "lon")
dft = t(df)

dist_matrix = GeoDistanceInMetresMatrix(df)

clusters.dist.d <- hclust(dist(dist_matrix),method="complete")
plot(clusters.dist.d)


combined$clus <- cutree(clusters.dist.d,8)

clu1 <- combined %>% filter(clus == 1)

clu2 <- combined %>% filter(clus == 2)

clu3 <- combined %>% filter(clus == 3)

clu4 <- combined %>% filter(clus == 4)

clu5 <- combined %>% filter(clus == 5)

clu6 <- combined %>% filter(clus == 6)

clu7 <- combined %>% filter(clus == 7)

clu8 <- combined %>% filter(clus == 8)


write.csv(clu1, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu1.csv")
write.csv(clu2, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu2.csv")
write.csv(clu3, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu3.csv")
write.csv(clu4, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu4.csv")
write.csv(clu5, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu5.csv")
write.csv(clu6, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu6.csv")  
write.csv(clu7, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu7.csv")
write.csv(clu8, file = "/Users/johnpamplin/Documents/RStudio/Clustering/Data/clu8.csv")


map <- get_map(location = "South End",zoom=12)
ggmap(map, fullpage = TRUE) + geom_point(data = combined, aes(x = longitude, y = latitude,color = as.factor(clus)), size = 2)
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 1
combined1 = clu1

toC1<- cbind(
  #scale(combined$bos_BH),
  scale(combined1$percent_full),
  scale(combined1$price),
  2*scale(combined1$avg))

clusters1.c <- hclust(dist(toC1),method="complete")
plot(clusters1.c)
combined1$clust <- cutree(clusters1.c,3)

combined1 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.673        -1.74           63.3      102.         8.33    43
# 2     2        0.573         0.202          81.3      110.         9.03   180
# 3     3        0.892         0.434         103.       347.         9.18    17

clut1 <- combined1 %>% filter(clust == 1) #red
clut2 <- combined1 %>% filter(clust == 2) #green
clut3 <- combined1 %>% filter(clust == 3) #blue

map <- get_map(location = "South End",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined1, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut3, aes(x = longitude, y = latitude), color = 'blue', size = 2) 

########################################################################################################################################################################
########################################################################################################################################################################
# cluster 2
combined2 = clu2

setDT(combined2)
#bunker hill monument coordinates
combined2$BH_lon = -71.0608
combined2$BH_lat = 42.3764
combined2[, bos_BH := distHaversine(matrix(c(BH_lon, BH_lat), ncol = 2),
                                   matrix(c(longitude, latitude), ncol = 2))]

toC2<- cbind(
  #scale(combined$bos_BH),
  scale(combined2$percent_full),
  scale(combined2$price),
  2*scale(combined2$avg))

clusters2.c <- hclust(dist(toC2),method="complete")
plot(clusters2.c)
combined2$clust <- cutree(clusters2.c,2)

combined2 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.505        -0.760          84.4      115.         9.04    55
# 2     2        0.539         0.776         130.       182.         9.69    42

clut1 <- combined2 %>% filter(clust == 1) #red
clut2 <- combined2 %>% filter(clust == 2) #green

map <- get_map(location = "Boston",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined2, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'green', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 3
 combined3 = clu3
# intresting points for cluster 3
setDT(combined3)
#old north church 
combined3$NC_lon = -71.0544
combined3$NC_lat = 42.3663
combined3[, bos_NC := distHaversine(matrix(c(NC_lon, NC_lat), ncol = 2),
                                   matrix(c(longitude, latitude), ncol = 2))]

#fenway park
combined3$fen_lon = -71.0972
combined3$fen_lat = 42.3467
combined3[, bos_fen := distHaversine(matrix(c(fen_lon, fen_lat), ncol = 2),
                                    matrix(c(longitude, latitude), ncol = 2))]
#boston commons 
combined3$BC_lon = -71.0655
combined3$BC_lat = 42.3550
combined3[, bos_BC := distHaversine(matrix(c(BC_lon, BC_lat), ncol = 2),
                                     matrix(c(longitude, latitude), ncol = 2))]

toC3<- cbind(
  scale(combined3$bos_NC),
  scale(combined3$bos_fen),
  #scale(combined$bos_HS),
  scale(combined3$bos_BC),
  scale(combined3$percent_full),
  scale(combined3$price),
  2*scale(combined3$avg))

clusters3.c <- hclust(dist(toC3),method="complete")
plot(clusters3.c)
combined3$clust <- cutree(clusters3.c,2)

combined3 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.513         0.485          146.      214.         9.83   515
# 2     2        0.715        -1.50           131.      191.         9.63   125

clut1 <- combined3 %>% filter(clust == 1) #green
clut2 <- combined3 %>% filter(clust == 2) #red

map <- get_map(location = "South End",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined3, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'red', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################

# cluster 4
combined4 = clu4

toC4<- cbind(
  #scale(combined$bos_BH),
  scale(combined4$percent_full),
  scale(combined4$price),
  2*scale(combined4$avg))

clusters4.c <- hclust(dist(toC4),method="complete")
plot(clusters4.c)
combined4$clust <- cutree(clusters4.c,2)

combined4 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.751        -1.07           65.7      88.6         8.56    45
# 2     2        0.616         0.469          83.4     131.          9.43   130

clut1 <- combined4 %>% filter(clust == 1) #red
clut2 <- combined4 %>% filter(clust == 2) #green

map <- get_map(location = "Roxbury",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined4, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'green', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 5
combined5 = clu5

toC5<- cbind(
  #scale(combined$bos_BH),
  scale(combined5$percent_full),
  scale(combined5$price),
  2*scale(combined5$avg))

clusters5.c <- hclust(dist(toC5),method="complete")
plot(clusters5.c)
combined5$clust <- cutree(clusters5.c,2)

combined5 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.821        -0.543          81.8      152.         8.75    32
# 2     2        0.281        -2.57           51.8      100.         9        6

clut1 <- combined5 %>% filter(clust == 1) #red
clut2 <- combined5 %>% filter(clust == 2) #orange

map <- get_map(location = "East Boston",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined5, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'orange', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 6
combined6 = clu6

toC6<- cbind(
  #scale(combined$bos_BH),
  scale(combined6$percent_full),
  scale(combined6$price),
  2*scale(combined6$avg))

clusters6.c <- hclust(dist(toC6),method="complete")
plot(clusters6.c)
combined6$clust <- cutree(clusters6.c,2)

combined6 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.476         0.708          80.2      104.         9.25    56
# 2     2        0.672        -0.394          72.3      123.         9.24    76

clut1 <- combined6 %>% filter(clust == 1) #green
clut2 <- combined6 %>% filter(clust == 2) #red

map <- get_map(location = "Allston",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined6, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'red', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 7
combined7 = clu7

toC7<- cbind(
  #scale(combined$bos_BH),
  scale(combined7$percent_full),
  scale(combined7$price),
  2*scale(combined7$avg))

clusters7.c <- hclust(dist(toC7),method="complete")
plot(clusters7.c)
combined7$clust <- cutree(clusters7.c,2)

combined7 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.653        -0.191          55.8      98.2         9.25    12
# 2     2        0.749         1.13           59        59           9.6      5

clut1 <- combined7 %>% filter(clust == 1) #red
clut2 <- combined7 %>% filter(clust == 2) #green

map <- get_map(location = "Roslindale",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined7, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'green', size = 2) 
########################################################################################################################################################################
########################################################################################################################################################################
# cluster 8
combined8 = clu8

toC8<- cbind(
  #scale(combined$bos_BH),
  scale(combined8$percent_full),
  scale(combined8$price),
  2*scale(combined8$avg))

clusters8.c <- hclust(dist(toC8),method="complete")
plot(clusters8.c)
combined8$clust <- cutree(clusters8.c,2)

combined8 %>%
  group_by(clust) %>%
  summarise(avg_bookrate = mean(percent_full),
            avg_sentiment = mean(avg),
            avg_price_bed = mean(price_per_bed),
            avg_price = mean(price),
            avg_location = mean(review_scores_location),
            num = n())

# clust avg_bookrate avg_sentiment avg_price_bed avg_price avg_location   num
# 1     1        0.653        -0.191          55.8      98.2         9.25    12
# 2     2        0.749         1.13           59        59           9.6      5

clut1 <- combined8 %>% filter(clust == 1) #green
clut2 <- combined8 %>% filter(clust == 2) #red

map <- get_map(location = "Roslindale",zoom=13)
ggmap(map, fullpage = TRUE) + geom_point(data = combined8, aes(x = longitude, y = latitude,color = as.factor(clust)), size = 2)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut2, aes(x = longitude, y = latitude), color = 'red', size = 2) 

########################################################################################################################################################################
########################################################################################################################################################################
clut1.1 <- combined1 %>% filter(clust == 1) #red
clut2.1 <- combined1 %>% filter(clust == 2) #green
clut3.1<- combined1 %>% filter(clust == 3) #blue

clut1.2 <- combined2 %>% filter(clust == 1) #red
clut2.2 <- combined2 %>% filter(clust == 2) #green

clut1.3 <- combined3 %>% filter(clust == 1) #green
clut2.3 <- combined3 %>% filter(clust == 2) #red

clut1.4 <- combined4 %>% filter(clust == 1) #red
clut2.4 <- combined4 %>% filter(clust == 2) #green

clut1.5 <- combined5 %>% filter(clust == 1) #red
clut2.5 <- combined5 %>% filter(clust == 2) #orange

clut1.6 <- combined6 %>% filter(clust == 1) #green
clut2.6 <- combined6 %>% filter(clust == 2) #red

clut1.7 <- combined7 %>% filter(clust == 1) #red
clut2.7 <- combined7 %>% filter(clust == 2) #green

clut1.8 <- combined8 %>% filter(clust == 1) #green
clut2.8 <- combined8 %>% filter(clust == 2) #red

map <- get_map(location = "South End",zoom=12)

ggmap(map, fullpage = TRUE) + geom_point(data = clut1.1, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2.1, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut3.1, aes(x = longitude, y = latitude), color = 'blue', size = 2) +
  geom_point(data = clut1.2, aes(x = longitude, y = latitude), color = 'red', size = 2) +
  geom_point(data = clut2.2, aes(x = longitude, y = latitude), color = 'green', size = 2) + 
  geom_point(data = clut1.3, aes(x = longitude, y = latitude), color = 'green', size = 2) +
  geom_point(data = clut2.3, aes(x = longitude, y = latitude), color = 'red', size = 2) +
  geom_point(data = clut1.4, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2.4, aes(x = longitude, y = latitude), color = 'green', size = 2) +
  geom_point(data = clut1.5, aes(x = longitude, y = latitude), color = 'red', size = 2) +
  geom_point(data = clut2.5, aes(x = longitude, y = latitude), color = 'orange', size = 2) + 
  geom_point(data = clut1.6, aes(x = longitude, y = latitude), color = 'green', size = 2) +
  geom_point(data = clut2.6, aes(x = longitude, y = latitude), color = 'red', size = 2) +
  geom_point(data = clut1.7, aes(x = longitude, y = latitude), color = 'red', size = 2) + 
  geom_point(data = clut2.7, aes(x = longitude, y = latitude), color = 'green', size = 2) +
  geom_point(data = clut1.8, aes(x = longitude, y = latitude), color = 'green', size = 2) +
  geom_point(data = clut2.8, aes(x = longitude, y = latitude), color = 'red', size = 2) 
#-----------------end of John's code -----------------------------------#
