library(survival)
library(survminer)
library(visreg)
library(dplyr)
library(flexsurv)
library(ggplot2)
katrina <- read.csv("C:/Users/Sophe/Desktop/FALL/Fall3/SurvivalAnalysis/Data/katrina.csv", header = T, stringsAsFactors = F)
katrina$ID <- 1:nrow(katrina)
# fit proportional hazards model using coxph()
fit_cox <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup +
bridgecrane + servo + trashrack + elevation + slope + age, data = katrina)
summary(fit_cox)
# change the format of data to use time-dependent variable
katrina$ID <- factor(katrina$ID)
colnames(katrina)[9:56] <- 1:48
katrina_long <- gather(katrina, stop, value, 9:56, factor_key = T)
katrina_long$stop <- as.numeric(katrina_long$stop)
katrina_long$start <-  katrina_long$stop - 1
library(dplyr)
library(tidyr)
katrina_long <- gather(katrina, stop, value, 9:56, factor_key = T)
katrina_long$stop <- as.numeric(katrina_long$stop)
katrina_long$start <-  katrina_long$stop - 1
katrina_long$consecutive <- 0
katrina_long <- katrina_long %>%
arrange(ID, start)
# create variable consecutive
sum = 0
for(i in 1:nrow(katrina_long)) {
if(katrina_long$start[i] == 0) {
if (katrina_long$value[i] == 1) {
sum <- 1
} else {
sum <- 0
}
} else if (sum >= 12) {
katrina_long$consecutive[i] <- 1
} else if (katrina_long$value[i] == 0 | is.na(katrina_long$value[i])) {
sum <- 0
}
sum <- sum + 1
}
View(katrina_long)
# model without consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age,
data = katrina_long)
summary(fit_katrina)
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
concordance(fit_katrina)
######check constant effect########################
#backup
fit_strat_backup <- coxph(Surv(hour, reason %in% c(2,3)) ~ strata(backup) + bridgecrane +
servo + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_backup), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "backup", xlab = "log(hour)")
#bridgecrane
fit_strat_bridgecrane <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + strata(bridgecrane) +
servo + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_bridgecrane), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "bridgecrane", xlab = "log(hour)")
#servo
fit_strat_servo <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
strata(servo) + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_servo), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "servo", xlab = "log(hour)")
#trashrack
fit_strat_trashrack <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + strata(trashrack) + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_trashrack), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "trashrack", xlab = "log(hour)")
summary(fit_cox)
# plot survival curve
ggsurvplot(survfit(fit_cox), data = katrina, legend = "none", break.y.by = 0.1,
xlab = "hour", ylab = "survival probability")
######check constant effect########################
#backup
fit_strat_backup <- coxph(Surv(hour, reason %in% c(2,3)) ~ strata(backup) + bridgecrane +
servo + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_backup), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "backup", xlab = "log(hour)")
#bridgecrane
fit_strat_bridgecrane <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + strata(bridgecrane) +
servo + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_bridgecrane), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "bridgecrane", xlab = "log(hour)")
#servo
fit_strat_servo <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
strata(servo) + trashrack + elevation + slope + age, data = katrina)
ggsurvplot(survfit(fit_strat_servo), data = katrina, fun = "cloglog",
palette = c("black", "purple"), legend.labs = c("no-upgrade", "upgrade"),
legend.title = "servo", xlab = "log(hour)")
#-----------------------------------Part 3 -------------------------------#
# Check if there are time-dependent coefficients
fit_cox_zph <- cox.zph(fit_cox)
fit_cox_zph
plot(fit_cox_zph, var = "age")
plot(fit_cox_zph, var = "slope")
plot(fit_cox_zph, var = "elevation")
plot(fit_cox_zph, var = "backup")
plot(fit_cox_zph, var = "bridgecrane")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "trashrack")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "bridgecrane")
plot(fit_cox_zph, var = "bridgecrane")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "trashrack")
plot(fit_cox_zph, var = "backup")
plot(fit_cox_zph, var = "bridgecrane")
# baseline concordance = .666
fit_tdc <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age +
tt(servo) + tt(backup),
data = katrina,
tt = function(x, time, ...) {x * log(time)})
summary(fit_tdc)
# change the format of data to use time-dependent variable
katrina$ID <- factor(katrina$ID)
colnames(katrina)[9:56] <- 1:48
katrina_long <- gather(katrina, stop, value, 9:56, factor_key = T)
katrina_long$stop <- as.numeric(katrina_long$stop)
katrina_long$start <-  katrina_long$stop - 1
katrina_long
katrina_long$stop <- as.numeric(katrina_long$stop)
katrina_long$start <-  katrina_long$stop - 1
katrina_long$consecutive <- 0
katrina_long <- katrina_long %>%
arrange(ID, start)
# create variable consecutive
sum = 0
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
# including time-dependent coefficients is not better
fit_tdc <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive +
tt(servo) + tt(backup),
data = katrina_long,
tt = function(x, time, ...) {x * log(time)})
summary(fit_tdc)
summary(fit_katrina)
# model without consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age,
data = katrina_long)
summary(fit_katrina)
# model without consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age,
data = katrina_long)
summary(fit_katrina)
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
# fit proportional hazards model using coxph()
fit_cox <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup +
bridgecrane + servo + trashrack + elevation + slope + age, data = katrina)
summary(fit_cox)
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
# plot the survival curve?????????????????
ggsurvplot(survfit(fit_katrina, newdata = katrina_long, id = ID), data=katrina_long, legend = "none", break.y.by = 0.1,
xlab = "hour", ylab = "survival probability")
install.packages("truncnorm")
#install.packages("truncnorm")
library(truncnorm)
library(stats)
install.packages("stats")
library(stats)
install.packages("stats")
library(stats)
#install.packages("truncnorm")
library(truncnorm)
library(ggplot2)
# Needed Libraries for Analysis #
library(graphics)
library(quantmod)
library(TTR)
library(ks)
library(scales)
set.seed(245642)
Hydrocarbons = rtruncnorm(100000, a=0, b=1, mean=0.99, sd = 0.05)
dfHydrocarbons = as.data.frame(Hydrocarbons)
ggplot(dfHydrocarbons, aes(x=Hydrocarbons)) +
geom_histogram(fill="gray", color="black") +
labs(title="Hydrocarbon Distribution",x="Proportion Hydrocarbons", y = "Frequency")+
theme_minimal() + theme(title = element_text(size = 18), axis.title.x = element_text(size =14), axis.title.y = element_text(size =14))
Reservoir = rtruncnorm(100000, a=0, b=1, mean=0.8, sd = 0.1)
dfReservoir = as.data.frame(Reservoir)
ggplot(dfReservoir, aes(x=Reservoir)) +
geom_histogram(fill="gray", color="black") +
labs(title="Reservoir Distribution",x="Proportion Reservoir", y = "Frequency")+
theme_minimal() + theme(title = element_text(size = 18), axis.title.x = element_text(size =14), axis.title.y = element_text(size =14))
n = 1000
proportion_productive = rep(0,n)
num_wet = rep(0,n)
num_dry = rep(0,n)
for(i in 1:n){
Total_wells = round(runif(1, min = 10, max = 30))
wet_wells <- rep(0,Total_wells)
Hydrocarbons = rtruncnorm(nn, a=0, b=1, mean=0.99, sd = 0.05)
Reservoir = rtruncnorm(nn, a=0, b=1, mean=0.8, sd = 0.1)
probability = (Hydrocarbons*Reservoir)
productive_well <- rep(0,Total_wells)
for(j in 1:Total_wells){
wet_wells[j] = rbinom(n=1, 1, probability)
}
proportion_productive[i] <- sum(wet_wells) / length(wet_wells)
num_wet[i] = sum(wet_wells)
num_dry[i] = length(wet_wells) - sum(wet_wells)
}
nn = 1000
for(i in 1:n){
Total_wells = round(runif(1, min = 10, max = 30))
wet_wells <- rep(0,Total_wells)
Hydrocarbons = rtruncnorm(nn, a=0, b=1, mean=0.99, sd = 0.05)
Reservoir = rtruncnorm(nn, a=0, b=1, mean=0.8, sd = 0.1)
probability = (Hydrocarbons*Reservoir)
productive_well <- rep(0,Total_wells)
for(j in 1:Total_wells){
wet_wells[j] = rbinom(n=1, 1, probability)
}
proportion_productive[i] <- sum(wet_wells) / length(wet_wells)
num_wet[i] = sum(wet_wells)
num_dry[i] = length(wet_wells) - sum(wet_wells)
}
hist(proportion_productive)
hist(num_dry)
hist(num_wet)
VaR.percentile <- 0.05
VaR = quantile(proportion_productive, probs = VaR.percentile)
ES = mean(ifelse(proportion_productive <= VaR, proportion_productive, NA), na.rm = TRUE)
hist(proportion_productive, breaks=20)
hist(proportion_productive, breaks=20)
abline(v = VaR, col="red", lwd=2)
mtext("VaR", at=VaR, col="red")
abline(v = ES, col="blue", lwd=2)
mtext("ES", at=ES, col="blue")
pp = as.data.frame(proportion_productive)
ggplot(pp, aes(x=proportion_productive)) +
geom_histogram(fill="gray", color="black") +
geom_vline(xintercept = VaR, colour = "red") +
geom_text(aes(x=(VaR+0.05), label="VaR", y=7500), colour="red") +
geom_vline(xintercept = (ES-0.05), colour = "blue") +
geom_text(aes(x=ES, label="ES", y=7500), colour="blue") +
labs(title="Estimated 2019 Proportion Productive Well Distribution",x="Proportion Productive Well", y = "Frequency")+
theme_minimal() + theme(title = element_text(size = 18), axis.title.x = element_text(size =14), axis.title.y = element_text(size =14))
fit_cox_zph
plot(fit_cox_zph, var = "age")
plot(fit_cox_zph, var = "slope")
plot(fit_cox_zph, var = "elevation")
plot(fit_cox_zph, var = "backup")
plot(fit_cox_zph, var = "bridgecrane")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "trashrack")
plot(fit_cox_zph, var = "servo")
ggplot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "servo")
plot(fit_cox_zph, var = "backup")
### concordance
concordance(fit_cox)
# fit proportional hazards model using coxph()
fit_cox <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup +
bridgecrane + servo + trashrack + elevation + slope + age, data = katrina)
library(survival)
library(survminer)
library(visreg)
library(dplyr)
library(flexsurv)
library(ggplot2)
library(tidyr)
# fit proportional hazards model using coxph()
fit_cox <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup +
bridgecrane + servo + trashrack + elevation + slope + age, data = katrina)
fit_cox <- coxph(Surv(time = hour, event = reason %in% c(2,3)) ~ backup +
bridgecrane + servo + trashrack + elevation + slope + age, data = katrina)
summary(fit_cox)
### concordance
concordance(fit_cox)
?concordance
concordance(fit_katrina)
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
katrina$ID <- factor(katrina$ID)
colnames(katrina)[9:56] <- 1:48
katrina_long <- gather(katrina, stop, value, 9:56, factor_key = T)
katrina_long$stop <- as.numeric(katrina_long$stop)
katrina_long$start <-  katrina_long$stop - 1
katrina_long$consecutive <- 0
katrina_long <- katrina_long %>%
arrange(ID, start)
# create variable consecutive
sum = 0
for(i in 1:nrow(katrina_long)) {
if(katrina_long$start[i] == 0) {
if (katrina_long$value[i] == 1) {
sum <- 1
} else {
sum <- 0
}
} else if (sum >= 12) {
katrina_long$consecutive[i] <- 1
} else if (katrina_long$value[i] == 0 | is.na(katrina_long$value[i])) {
sum <- 0
}
sum <- sum + 1
}
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
# model with consecutive
fit_katrina <- coxph(Surv(start, stop, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age + consecutive,
data = katrina_long)
summary(fit_katrina)
# baseline concordance = .666
fit_tdc <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age +
tt(servo) + tt(backup),
data = katrina,
tt = function(x, time, ...) {x * log(time)})
summary(fit_tdc)
# baseline concordance = .666
fit_tdc <- coxph(Surv(hour, reason %in% c(2,3)) ~ backup + bridgecrane +
servo + trashrack + elevation + slope + age +
tt(servo),
data = katrina,
tt = function(x, time, ...) {x * log(time)})
summary(fit_tdc)
plot(fit_cox_zph, var = "age")
plot(fit_cox_zph, var = "trashrack")
